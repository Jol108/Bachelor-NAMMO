import matplotlib.pyplot as plt
import re
import numpy as np

def normalize_v3(v):
    R1 = 10000
    R2 = 4700
    return v * (R1 + R2) / R2

def clean_value(value):
    try:
        return float(re.sub(r'[^\d.-]+', '', value))
    except ValueError:
        return 0.0

def moving_average(data, window_size=10):
    return np.convolve(data, np.ones(window_size)/window_size, mode='same')

def read_and_plot(filename):
    test_data = []
    current_test = []
    prev_time = None

    with open(filename, 'r') as file:
        for line in file:
            line = line.strip()
            if not line:
                continue
            parts = line.split(',')
            if len(parts) < 5:
                continue

            time = clean_value(parts[0])
            v1 = clean_value(parts[1])
            v2 = clean_value(parts[2])
            v3 = clean_value(parts[3])
            v4 = clean_value(parts[4])

            if prev_time is not None and time < prev_time:
                test_data.append(current_test)
                current_test = []

            current_test.append((time, v1, v2, normalize_v3(v3), v4))
            prev_time = time

        if current_test:
            test_data.append(current_test)

    for i, test in enumerate(test_data):
        times = [row[0] for row in test]
        v1s = moving_average([row[1] for row in test])
        v2s = moving_average([row[2] for row in test])
        v3s = moving_average([row[3] for row in test])
        v4s = moving_average([row[4] for row in test])

        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 7), sharex=True)
        fig.suptitle(f'Test {i+1}', fontsize=14)

        # Plotting
        l1, = ax1.plot(times, v3s, label='Turbin', color='orange')
        l2, = ax1.plot(times, v4s, label='Pietzo', color='green')
        ax1.set_ylabel('Voltage (V)')
        ax1.grid(True)

        l3, = ax2.plot(times, v1s, label='Induksjon', color='blue')
        l4, = ax2.plot(times, v2s, label='Peltier', color='purple')
        ax2.set_xlabel('Time (ms)')
        ax2.set_ylabel('Voltage (V)')
        ax2.grid(True)

        # Single legend below the plots
        fig.legend(
            handles=[l1, l2, l3, l4],
            loc='lower center',
            ncol=4,
            bbox_to_anchor=(0.5, -0.02),
            fontsize=15
        )

        plt.tight_layout(rect=[0, 0.05, 1, 0.96])
        plt.show()

# Run it
read_and_plot("Data_ute.txt")
